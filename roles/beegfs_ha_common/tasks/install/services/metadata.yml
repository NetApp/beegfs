# TODO: Determine which cluster node is running which metadata service.
# TODO:   If not installed or not running use the preferred node.

- name: Create mount point directory for each metadata volume.
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    mode: "0755"
  loop: "{{ directories }}"
  become: true
  vars:
    directories: |-
      {%- set directories = [] -%}
      {%- for service in node_info['metadata'] -%}
        {%- if directories.append(service["volumes"][0]["metadata"]["mount_dir"] ~ service["volumes"][0]["name"]) -%}{%- endif -%}
      {%- endfor -%}
      {{- directories -}}


- name: Retrieve currently mounted volumes on the preferred host.
  ansible.builtin.command:
    cmd: mount
    warn: false
  changed_when: false
  register: mount_info
  become: true

- name: Ensure the metadata volumes are mounted on the preferred hosts.
  ansible.builtin.command:
    cmd: "mount -t {{ item['volumes'][0]['metadata']['format_type'] }} -o {{ item['volumes'][0]['metadata']['mount_options'] }}
                   {{ item['volumes'][0]['path'] }} {{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}"
    warn: false
  loop: "{{ node_info['metadata'] }}"
  register: metadata_volume_mount
  when: inventory_hostname == item['preferred_node_order'][0] and item['volumes'][0]['name'] not in mounted_metadata_volumes
  become: true
  vars:
    mounted_metadata_volumes: |-
      {%- set volumes = [] -%}
      {%- for metadata in node_info["metadata"] -%}
        {%- set volume = metadata["volumes"][0]["name"] -%}
        {%- for line in mount_info["stdout_lines"] if volume in line -%}
          {%- if volumes.append(volume) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- volumes -}}

- name: Create required directories for metadata service.
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    mode: "0755"
  loop: "{{ directories }}"
  become: true
  vars:
    directories: |-
      {%- set directories = [] -%}
      {%- for service in node_info["metadata"] if inventory_hostname == service["preferred_node_order"][0] -%}
        {%- set base = service["volumes"][0]["metadata"]["mount_dir"] ~ service["volumes"][0]["name"] -%}
        {%- if directories.append(base ~ "/data") -%}{%- endif -%}
        {%- if directories.append(base ~ "/metadata_config") -%}{%- endif -%}
      {%- endfor -%}
      {{- directories -}}

- name: Generate connInterfacesFile.conf file.
  ansible.builtin.template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'common/connInterfacesFile_conf.j2') }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/metadata_config/connInterfacesFile.conf"
    mode: "0644"
  loop: "{{ node_info['metadata'] }}"
  register: metadata_interface_conf
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Generate metadata connNetFilterFile.conf file.
  ansible.builtin.template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'common/connNetFilterFile_conf.j2') }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/metadata_config/connNetFilterFile.conf"
    mode: "0644"
  loop: "{{ node_info['metadata'] }}"
  register: metadata_filter_conf
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Ensure beegfs-meta.conf file is configured.
  netapp_eseries.host.update_conf:
    src: "{{ beegfs_ha_beegfs_meta_conf_path }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/metadata_config/beegfs-meta.conf"
    options: |-
      {%- set metadata_directory = item["volumes"][0]["metadata"]["mount_dir"] ~ item["volumes"][0]["name"] ~ "/data" -%}
      {%- set required_options = {"sysMgmtdHost": management_info["resource_group"],
                                  "storeMetaDirectory": metadata_directory,
                                  "connInterfacesFile": item["volumes"][0]["metadata"]["mount_dir"] ~ item["volumes"][0]["name"] ~ "/metadata_config/connInterfacesFile.conf",
                                  "connDisableAuthentication": not beegfs_ha_conn_auth_enabled,
                                  "logStdFile": "/var/log/beegfs-meta-" ~ item["volumes"][0]["name"] ~ ".log"} -%}
      {%- if beegfs_ha_conn_auth_dest is defined -%}
        {%- if required_options.update({"connAuthFile": beegfs_ha_conn_auth_dest}) -%}{%- endif -%}
      {%- endif -%}
      {%- if (item["filter_ip_ranges"] | default(beegfs_ha_filter_ip_ranges)) | length > 0 -%}
        {%- if required_options.update({"connNetFilterFile": item["volumes"][0]["metadata"]["mount_dir"] ~ item["volumes"][0]["name"] ~ "/metadata_config/connNetFilterFile.conf"}) -%}{%- endif -%}
      {%- endif -%}
      {{- item["service_configuration_options"] | combine(required_options) -}}
    mode: "0644"
    timestamp_backup: true
  loop: "{{ node_info['metadata'] }}"
  register: metadata_service_conf
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Determine BeeGFS metadata services that need to be restarted.
  ansible.builtin.set_fact:
    restart_metadata_services: |-
      {%- set services = [] -%}
      {%- for result in metadata_interface_conf["results"] if result["changed"] -%}
        {%- set service = "beegfs-meta@" ~ result["item"]["volumes"][0]["name"] ~ ".service" -%}
        {%- if ansible_facts.services[service]['state'] | default('') == 'running' -%}
          {%- if services.append(service) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {%- for result in metadata_filter_conf["results"] if result["changed"] -%}
        {%- set service = "beegfs-meta@" ~ result["item"]["volumes"][0]["name"] ~ ".service" -%}
        {%- if service not in services and ansible_facts.services[service]['state'] | default('') == 'running' -%}
          {%- if services.append(service) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {%- for result in metadata_service_conf["results"] if result["changed"] -%}
        {%- set service = "beegfs-meta@" ~ result["item"]["volumes"][0]["name"] ~ ".service" -%}
        {%- if service not in services and ansible_facts.services[service]['state'] | default('') == 'running' -%}
          {%- if services.append(service) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{- services -}}

- name: Restart BeeGFS metadata services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: restarted
  loop: "{{ restart_metadata_services }}"
  become: true

- name: Initialize management storage directory for beegfs-meta server daemon and update the beegfs-meta config file.
  ansible.builtin.command:
    cmd: "/opt/beegfs/sbin/beegfs-setup-meta -C
          -p {{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/data
          -s {{ item['node_string_id'].split('_')[-1] | int | round(0,'floor') | int | string }}
          -S {{ item['node_string_id'] }}
          -m {{ management_info['resource_group'] }}"
  loop: "{{ node_info['metadata'] }}"
  register: beegfs_setup_meta
  failed_when: "beegfs_setup_meta['rc'] != 0 and 'ERROR: Storage directory is not empty.' not in beegfs_setup_meta['stdout']"
  changed_when: "'ERROR: Storage directory is not empty.' not in beegfs_setup_meta['stdout']"
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Unmount metadata volume.
  ansible.builtin.command:
    cmd: "umount {{ item['item']['volumes'][0]['metadata']['mount_dir'] }}{{ item['item']['volumes'][0]['name'] }}"
  loop: "{{ metadata_volume_mount['results'] }}"
  ignore_errors: true
  when: item['changed'] == True
  become: true

# Update beegfs-meta.service to point to beegfs-meta.conf.
- name: Override the default beegfs-meta.service file.
  ansible.builtin.template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'metadata/beegfs_meta_service.j2') }}"
    dest: /etc/systemd/system/beegfs-meta@.service
  register: beegfs_meta_service_override
  become: true

- name: Reload systemctl daemons.
  ansible.builtin.systemd:
    name: "beegfs-meta@{{ item['volumes'][0]['name'] }}"
    #state: stopped
    enabled: false
    daemon_reload: "{% if beegfs_meta_service_override['changed'] %}true{% else %}false{% endif %}"
  register: beegfs_meta_service
  loop: "{{ node_info['metadata'] }}"
  become: true
