# Determine expected BeeGFS HA management service information required for configuration.
- name: Select details about management service.
  ansible.builtin.set_fact:
    mgmt_volume: "{{ management_info['volumes'][0] }}"
    resource_group: "{{ management_info['resource_group'] }}"
    floating_ips: "{{ management_info['floating_ips'] }}"
    filter_ip_ranges: "{{ management_info['filter_ip_ranges'] | default(beegfs_ha_filter_ip_ranges) }}"

- name: Select details about the management volume.
  ansible.builtin.set_fact:
    mgmt_volume_name: "{{ mgmt_volume['name'] }}"
    mgmt_volume_mount_device: "{{ mgmt_volume['path'] }}"
    mgmt_volume_format_type: "{{ mgmt_volume['metadata']['format_type'] }}"
    mgmt_volume_mount_options: "{{ mgmt_volume['metadata']['mount_options'] }}"
    mgmt_volume_mount: "{{ mgmt_volume['metadata']['mount_dir'] }}{{ mgmt_volume['name'] }}"
    mgmt_config_path: "{{ mgmt_volume['metadata']['mount_dir'] }}{{ mgmt_volume['name'] }}/mgmt_config/"
    mgmt_data_path: "{{ mgmt_volume['metadata']['mount_dir'] }}{{ mgmt_volume['name'] }}/data"

- name: Determine the required options for the beegfs-mgmt.conf file.
  ansible.builtin.set_fact:
    beegfs_ha_beegfs_mgmtd_conf_required_options:
      connDisableAuthentication: "{{ not beegfs_ha_conn_auth_enabled }}"
      connAuthFile: "{{ beegfs_ha_conn_auth_dest | default(omit) }}"
      storeMgmtdDirectory: "{{ mgmt_data_path }}"
      connInterfacesFile: "{{ mgmt_config_path }}connInterfacesFile.conf"
      connNetFilterFile: "{% if (filter_ip_ranges | default(beegfs_ha_filter_ip_ranges)) | length > 0 %}{{ mgmt_config_path }}connNetFilterFile.conf{% endif %}"

- name: "Create {{ mgmt_volume_mount }} directory as the mount point for the management volume."
  ansible.builtin.file:
    state: directory
    path: "{{ mgmt_volume_mount }}"
    mode: "0755"
  become: true

# This would catch if for some reason we remove earlier logic that prevents running this block against
# a node that doesn't contain any "node_info['management']" instances which would return a confusing error.
# It also helps us avoid trying to configure multiple management services on the same node, which is not
# supported in current versions of BeeGFS.

- name: Warn if there isn't exactly one management service configured for this node.
  pause:
    prompt:
      WARNING! There is more than one BeeGFS management service in the inventory for this node OR we should
      have skipped trying to configure the management service on this node, but earlier logic was removed that
      would prevent this from happening. In either case it is recommended you terminate the deployment and
      verify your inventory is correct. If your inventory is correct and you are still seeing this message,
      please open a case with NetApp support before bypassing this warning and continuing the deployment.
  when: node_info['management'] | length != 1

# Ensure the BeeGFS HA management service configuration.
- name: Ensure the BeeGFS HA management service is configured.
  block:

    # Ensure volumes are mounted to determine the BeeGFS HA management service configuration.
    - name: Retrieve currently mounted volumes.
      ansible.builtin.command:
        cmd: mount
        warn: false
      changed_when: false
      register: current_mounted_volumes

    - name: Mount management volume.
      ansible.builtin.command:
        cmd: "mount -t {{ mgmt_volume_format_type }} -o {{ mgmt_volume_mount_options }} {{ mgmt_volume_mount_device }} {{ mgmt_volume_mount }}"
        warn: false
      register: management_volume_mount
      when: volume_mounted == False
      vars:
        volume_mounted: |-
          {%- set scratch = {"mounted": False} -%}
          {%- for entry in current_mounted_volumes["stdout_lines"] if mgmt_volume_mount in entry -%}
            {%- if scratch.update({"mounted": True}) -%}{%- endif -%}
          {%- endfor -%}
          {{- scratch["mounted"] -}}

    - name: Ensure directory structure is configured on management configuration volume.
      ansible.builtin.file:
        state: directory
        path: "{{ mgmt_volume['metadata']['mount_dir'] }}{{ mgmt_volume['name'] }}/{{ item }}"
        mode: "0755"
      loop: ["data", "mgmt_config"]

    - name: Generate management connInterfacesFile.conf file.
      ansible.builtin.template:
        src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'common/connInterfacesFile_conf.j2') }}"
        dest: "{{ mgmt_config_path }}connInterfacesFile.conf"
        mode: "0644"
      loop: "{{ node_info['management'] }}"
      register: mgmtd_interface_conf

    - name: Generate management connNetFilterFile.conf file.
      ansible.builtin.template:
        src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'common/connNetFilterFile_conf.j2') }}"
        dest: "{{ mgmt_config_path }}connNetFilterFile.conf"
        mode: "0644"
      loop: "{{ node_info['management'] }}"
      register: mgmtd_filter_conf

    - name: Ensure beegfs-mgmtd.conf file is configured.
      netapp_eseries.host.update_conf:
        src: "{{ beegfs_ha_beegfs_mgmtd_conf_path }}"
        dest: "{{ mgmt_config_path }}beegfs-mgmtd.conf"
        options: "{{ item['service_configuration_options'] | combine(beegfs_ha_beegfs_mgmtd_conf_required_options) }}"
        mode: "0644"
        timestamp_backup: true
      loop: "{{ node_info['management'] }}"
      register: mgmtd_service_conf

    - name: Restart the BeeGFS management service when changes have been made.
      ansible.builtin.systemd:
        name: beegfs-mgmtd.service
        state: restarted
      when: ansible_facts.services['beegfs-mgmtd.service']['state'] | default('') == 'running' and (mgmtd_interface_conf['changed'] or mgmtd_filter_conf['changed'] or mgmtd_service_conf['changed'])

    - name: Initialize management storage directory for beegfs-mgmtd server daemon and update the beegfs-mgmtd config file.
      ansible.builtin.command:
        cmd: "/opt/beegfs/sbin/beegfs-setup-mgmtd -p {{ mgmt_data_path }} -C -S {{ resource_group }}"
      register: beegfs_setup_mgmtd
      failed_when: "beegfs_setup_mgmtd['rc'] != 0 and 'ERROR: Storage directory is not empty.' not in beegfs_setup_mgmtd['stdout']"
      changed_when: "'ERROR: Storage directory is not empty.' not in beegfs_setup_mgmtd['stdout']"

    - name: Unmount management volume.
      ansible.builtin.command: "umount {{ mgmt_volume_mount }}"
      when: management_volume_mount['changed']
  # This works because there should only ever be one BeeGFS management service running per cluster.
  when: inventory_hostname == node_info['management'][0]['preferred_node_order'][0]
  become: true

# Update beegfs-mgmtd.service to point to beegfs-mgmtd.conf.
- name: Override the default beegfs-mgmtd.service file.
  ansible.builtin.template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'management/beegfs_mgmtd_service.j2') }}"
    dest: /etc/systemd/system/beegfs-mgmtd.service
    mode: "0644"
  register: beegfs_mgmtd_service_override
  become: true

- name: Ensure BeeGFS management systemd service is up to date.
  ansible.builtin.systemd:
    name: beegfs-mgmtd.service
    enabled: false
    daemon_reload: "{% if beegfs_mgmtd_service_override['changed'] %}true{% else %}false{% endif %}"
  register: beegfs_mgmtd_service
  become: true

- name: Restart BeeGFS management service.
  ansible.builtin.systemd:
    name: beegfs-mgmtd.service
    state: restarted
  register: beegfs_mgmtd_service
  when: beegfs_ha_force_restart_services
  become: true
