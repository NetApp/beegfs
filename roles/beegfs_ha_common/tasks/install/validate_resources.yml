# Be sure to only run once using the cluster_automation_node node.

- name: Check each pacemaker resource status.
  ansible.builtin.shell: "for x in $(crm_resource --list-raw); do crm_resource --resource=$x --why; done"
  register: pacemaker_resources_status
  changed_when: false
  failed_when: false
  run_once: true
  become: true

- name: Determine whether any resources are not started.
  ansible.builtin.set_fact:
    resources_not_started: |-
      {%- set resources = [] -%}
      {%- for line in pacemaker_resources_status["stdout_lines"] if line and line | regex_search("is not running", ignorecase=True) -%}
        {%- if resources.append(line.split(" ")[1]) -%}{%- endif -%}
      {%- endfor -%}
      {{- resources -}}
  run_once: true

- name: Attempt to restart the cluster and verify all services are started.
  block:
    - name: Restart cluster.
      ansible.builtin.include_tasks: common/restart_cluster.yml

    - name: Clean up all resources on all node.
      ansible.builtin.command: crm_resource --cleanup
      register: crm_resource_cleanup
      delay: 1
      retries: 15
      until: crm_resource_cleanup['rc'] == 0
      run_once: true
      delegate_to: "{{ cluster_automation_node }}"
      become: true

    - name: Validate resources are all started.
      ansible.builtin.include_tasks: install/validate_resources.yml
      vars:
        cluster_restart_complete: true
  when: resources_not_started | length > 0 and not cluster_restart_complete | default(false)

- name: Fail when resources are not running.
  ansible.builtin.fail:
    msg: "Not all BeeGFS HA resources are running. {{ resources_not_started }}"
  when: cluster_restart_complete | default(false)
