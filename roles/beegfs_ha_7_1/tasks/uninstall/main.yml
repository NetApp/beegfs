- name: Set current storage system credentials
  include_role:
    name: netapp_eseries.santricity.nar_santricity_common
    tasks_from: build_info.yml
  when: inventory_hostname in groups[beegfs_ha_ansible_storage_group] and current_eseries_api_url is not defined

- name: Collect NetApp E-Series volume information (Always).
  include_tasks: ../collect_facts.yml

- name: Collect facts about systemd services.
  service_facts:
  become: true
  when: inventory_hostname in groups[beegfs_ha_ansible_cluster_group]

- name: Stop Pacemaker service.
  systemd:
    state: stopped
    name: pacemaker
  when: inventory_hostname in groups[beegfs_ha_ansible_cluster_group] and 'pacemaker.service' in (ansible_facts['services'].keys() | list)
  become: true

- name: Stop Corosync service.
  systemd:
    state: stopped
    name: corosync
  when: "inventory_hostname in groups[beegfs_ha_ansible_cluster_group] and 'corosync.service' in (ansible_facts['services'].keys() | list)"
  become: true

- name: Ensure storage has been provisioned for hosts.
  include_role:
    name: netapp_eseries.host.unmount
  when: beegfs_ha_delete_data_volumes == True and inventory_hostname in groups[beegfs_ha_ansible_cluster_group]
  vars:
    eseries_common_group: "{{ beegfs_ha_ansible_storage_group }}"
    eseries_unmount_volumes: |-
      {%- set volumes = [] -%}
      {%- if "node_info" in (hostvars[inventory_hostname].keys() | list) -%}
        {%- set info = hostvars[inventory_hostname]["node_info"] -%}
        {%- for service in info["services"] -%}
          {%- for resource in info[service] -%}
            {%- for volume in resource["volumes"] -%}
              {%- if volumes.append(volume["name"]) -%}{%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endif -%}
      {{- volumes -}}
    eseries_unmount_purge: true
    eseries_unmount_delete: true
    eseries_unmount_wipe_format_signatures: true

- name: "Delete the mount point for the management volume."
  file:
    state: absent
    path: "{{ management_info['volumes'][0]['metadata']['mount_dir'] }}{{ management_info['volumes'][0]['name'] }}"
  when: 'inventory_hostname in groups[beegfs_ha_ansible_cluster_group] and "management" in node_info["services"]'
  become: true

- name: Delete mount point directory for each metadata volume.
  file:
    state: absent
    path: "{{ item['metadata']['mount_dir'] }}{{ item['name'] }}"
  loop: "{{ all_volumes }}"
  when: 'inventory_hostname in groups[beegfs_ha_ansible_cluster_group] and "metadata" in node_info["services"]'
  become: true
  vars:
    all_volumes: |-
      {%- set all_volumes = [] -%}
      {%- for metadata in node_info["metadata"] -%}
        {%- for volume in metadata["volumes"] -%}
          {%- if all_volumes.append(volume) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- all_volumes -}}

- name: Delete mount point directory for each storage volume from each storage service.
  file:
    state: absent
    path: "{{ item['metadata']['mount_dir'] }}{{ item['name'] }}"
  loop: "{{ all_volumes }}"
  when: 'inventory_hostname in groups[beegfs_ha_ansible_cluster_group] and "storage" in node_info["services"]'
  become: true
  vars:
    all_volumes: |-
      {%- set all_volumes = [] -%}
      {%- for storage in node_info["storage"] -%}
        {%- for volume in storage["volumes"] -%}
          {%- if all_volumes.append(volume) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- all_volumes -}}

- name: Ensure multipath and iscsi protocol are setup.
  include_role:
    name: netapp_eseries.host.storage_setup
  when: beegfs_ha_uninstall_storage_setup == True and inventory_hostname in groups[beegfs_ha_ansible_cluster_group]
  vars:
    eseries_storage_setup_uninstall: true

- name: Ensure storage has been provisioned for hosts.
  include_role:
    name: netapp_eseries.santricity.nar_santricity_host
  when: beegfs_ha_delete_data_volumes == True and inventory_hostname in groups[beegfs_ha_ansible_storage_group]
  vars:
    eseries_remove_all_configuration: true

- name: Uninstall any configure OS-specific packages.
  include_tasks: "packages/{{ ansible_os_family | lower }}.yml"
  when: inventory_hostname in groups[beegfs_ha_ansible_cluster_group]

- name: Uninstall any configure OS-specific client packages.
  include_tasks: "services/client.yml"
  when: inventory_hostname in groups[beegfs_ha_ansible_client_group]

- name: Ensure any performance tuning has been removed.
  include_tasks: "performance_tuning.yml"
  when: 'inventory_hostname in groups[beegfs_ha_ansible_cluster_group] and ("metadata" in node_info["services"] or "storage" in node_info["services"])'

- name: Reboot nodes
  reboot:
  when: inventory_hostname in groups[beegfs_ha_ansible_cluster_group] and beegfs_ha_uninstall_reboot == True
  become: true

- name: Ensure any cluster and BeeGFS configuration files are removed.
  include_tasks: "configuration.yml"
  when: inventory_hostname in groups[beegfs_ha_ansible_cluster_group]
