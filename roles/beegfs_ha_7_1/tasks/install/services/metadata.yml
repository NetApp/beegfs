# TODO: Determine which cluster node is running which metadata service.
# TODO:   If not installed or not running use the preferred node.

- name: Create mount point directory for each metadata volume.
  file:
    state: directory
    path: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}"
  loop: "{{ node_info['metadata'] }}"
  become: true

- name: Retrieve currently mounted volumes on the preferred host.
  command:
    cmd: mount
    warn: false
  changed_when: false
  register: mount_info
  become: true

- name: Ensure the metadata volumes are mounted on the preferred hosts.
  command:
    cmd: "mount -t {{ item['volumes'][0]['metadata']['format_type'] }} -o {{ item['volumes'][0]['metadata']['mount_options'] }}
                /dev/mapper/{{ item['volumes'][0]['name'] }} {{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}"
    warn: false
  loop: "{{ node_info['metadata'] }}"
  register: metadata_volume_mount
  when: inventory_hostname == item['preferred_node_order'][0] and item['volumes'][0]['name'] not in mounted_metadata_volumes
  become: true
  vars:
    mounted_metadata_volumes: |-
      {%- set volumes = [] -%}
      {%- for metadata in node_info["metadata"] -%}
        {%- set volume = metadata["volumes"][0]["name"] -%}
        {%- for line in mount_info["stdout_lines"] if volume in line -%}
          {%- if volumes.append(volume) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- volumes -}}

- name: Create data directory for metadata service.
  file:
    state: directory
    path: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/data"
  loop: "{{ node_info['metadata'] }}"
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Create metadata_config directory for metadata service.
  file:
    state: directory
    path: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/metadata_config"
  loop: "{{ node_info['metadata'] }}"
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Generate connInterfacesFile.conf file.
  template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'common/connInterfacesFile_conf.j2') }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/metadata_config/connInterfacesFile.conf"
  loop: "{{ node_info['metadata'] }}"
  register: connInterfacesFile_conf
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Generate metadata connNetFilterFile.conf file.
  template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'common/connNetFilterFile_conf.j2') }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/metadata_config/connNetFilterFile.conf"
  loop: "{{ node_info['metadata'] }}"
  register: connNetFilterFile_conf
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Ensure beegfs-meta.conf file is configured.
  template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'metadata/beegfs_meta_conf.j2') }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/metadata_config/beegfs-meta.conf"
  loop: "{{ node_info['metadata'] }}"
  register: beegfs_meta_conf
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Initialize management storage directory for beegfs-meta server daemon and update the beegfs-meta config file.
  command:
    cmd: "/opt/beegfs/sbin/beegfs-setup-meta -C
          -p {{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/data
          -s {{ item['node_string_id'].split('_')[-1] | int | round(0,'floor') | int | string }}
          -S {{ item['node_string_id'] }}
          -m {{ management_info['resource_group'] }}"
  loop: "{{ node_info['metadata'] }}"
  register: beegfs_setup_meta
  failed_when: "beegfs_setup_meta['rc'] != 0 and 'ERROR: Storage directory is not empty.' not in beegfs_setup_meta['stdout']"
  changed_when: "'ERROR: Storage directory is not empty.' not in beegfs_setup_meta['stdout']"
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Unmount metadata volume.
  command:
    cmd: "umount {{ item['item']['volumes'][0]['metadata']['mount_dir'] }}{{ item['item']['volumes'][0]['name'] }}"
  loop: "{{ metadata_volume_mount['results'] }}"
  when: item['changed'] | bool == True

# Update beegfs-meta.service to point to beegfs-meta.conf.
- name: Override the default beegfs-meta.service file.
  template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'metadata/beegfs_meta_service.j2') }}"
    dest: /etc/systemd/system/beegfs-meta@.service
  register: beegfs_meta_service_override
  become: true

- name: Reload systemctl daemons.
  systemd:
    name: "beegfs-meta@{{ item['volumes'][0]['name'] }}"
    #state: stopped
    enabled: false
    daemon_reload: "{% if beegfs_meta_service_override['changed'] %}true{% else %}false{% endif %}"
  register: beegfs_meta_service
  loop: "{{ node_info['metadata'] }}"
  become: true

## Configure pacemaker metadata group resources.
#- name: Query current pacemaker metadata group resources.
#  command:
#    cmd: "cibadmin --query --xpath '/cib/configuration/resources/group[@id=\"{{ item[\"resource_group\"] }}-group\"]'"
#  loop: "{{ node_info['metadata'] }}"
#  register: metadata_group_resource_query
#  failed_when: false
#  changed_when: false
#  when: inventory_hostname == item['preferred_node_order'][0]
#
#- name: Determine whether changes are required.
#  command:
#    cmd: "crm_diff -O '{{ item[\"stdout\"] | default(\"\")}}' -N '{{ lookup(\"template\", \"metadata/resources.j2\") }}'"
#  loop: "{{ metadata_group_resource_query['results'] }}"
#  register: metadata_group_resource_diff
#  changed_when: false
#  failed_when: metadata_group_resource_diff['rc'] not in [0, 1]
#  when: inventory_hostname == item['item']['preferred_node_order'][0]
#
#- name: Modify pcs metadata group resources.
#  command:
#    cmd: "cibadmin {% if item['item']['rc'] == 6 %}--create --scope resources {% else %}--modify --xpath '{{ xpath }}'{% endif %} --xml-text '{{ xml }}'"
#  loop: "{{ metadata_group_resource_diff['results'] }}"
#  register: metadata_group_resource_update
#  when: inventory_hostname == item['item']['item']['preferred_node_order'][0] and item['rc'] == 1
#  vars:
#    xpath: "/cib/configuration/resources/group[@id=\"{{ item['item']['item']['resource_group'] }}-group\"]"
#    xml: "{{ lookup('template', 'metadata/resources.j2') }}"



#- name: Build pacemaker cluster metadata group resources.
#  set_fact:
#    cluster_resources: "{{ cluster_resources ~ lookup('template', 'metadata/resources.j2') }}"
#  loop: "{{ node_info['metadata'] }}"
#  run_once: true
