# Determine expected BeeGFS HA management service information required for configuration.
- name: Select details about management service.
  set_fact:
    mgmt_volume: "{{ management_info['volumes'][0] }}"
    resource_group: "{{ management_info['resource_group'] }}"
    floating_ips: "{{ management_info['floating_ips'] }}"
    filter_ip_ranges: "{{ management_info['filter_ip_ranges'] | default(beegfs_ha_filter_ip_ranges) }}"
    mgmt_tcp_port: "{{ management_info['tcp_port'] | default(management_info['port'] | default('8008')) }}"
    mgmt_udp_port: "{{ management_info['udp_port'] | default(management_info['port'] | default('8008')) }}"

- name: Select details about the management volume.
  set_fact:
    mgmt_volume_name: "{{ mgmt_volume['name'] }}"
    mgmt_volume_mount_device: "/dev/mapper/{{ mgmt_volume['name'] }}"
    mgmt_volume_format_type: "{{ mgmt_volume['metadata']['format_type'] }}"
    mgmt_volume_mount_options: "{{ mgmt_volume['metadata']['mount_options'] }}"
    mgmt_volume_mount: "{{ mgmt_volume['metadata']['mount_dir'] }}{{ mgmt_volume['name'] }}"
    mgmt_config_path: "{{ mgmt_volume['metadata']['mount_dir'] }}{{ mgmt_volume['name'] }}/mgmt_config/"
    mgmt_data_path: "{{ mgmt_volume['metadata']['mount_dir'] }}{{ mgmt_volume['name'] }}/data"

- name: "Create {{ mgmt_volume_mount }} directory as the mount point for the management volume."
  file:
    state: directory
    path: "{{ mgmt_volume_mount }}"
  become: true

# TODO: Determine which cluster node is running the management service.
# TODO:   If not installed or not running use the preferred node.

# Ensure the BeeGFS HA management service configuration.
- name: Ensure the BeeGFS HA management service is configured.
  block:

    # Ensure volumes are mounted to determine the BeeGFS HA management service configuration.
    - name: Retrieve currently mounted volumes.
      command:
        cmd: mount
        warn: false
      changed_when: false
      register: current_mounted_volumes
      become: true

    - name: Mount management volume.
      command:
        cmd: "mount -t {{ mgmt_volume_format_type }} -o {{ mgmt_volume_mount_options }} /dev/mapper/{{ mgmt_volume_name }} {{ mgmt_volume_mount }}"
        warn: false
      register: management_volume_mount
      when: volume_mounted | bool == False
      become: true
      vars:
        volume_mounted: |-
          {%- set scratch = {"mounted": False} -%}
          {%- for entry in current_mounted_volumes["stdout_lines"] if mgmt_volume_mount in entry -%}
            {%- if scratch.update({"mounted": True}) -%}{%- endif -%}
          {%- endfor -%}
          {{- scratch["mounted"] -}}

    - name: Create directory structure is configured on management configuration volume.
      file:
        state: directory
        path: "{{ mgmt_volume['metadata']['mount_dir'] }}{{ mgmt_volume['name'] }}/{{ item }}"
      loop: ["data", "mgmt_config"]
      become: true

    - name: Generate management connInterfacesFile.conf file.
      template:
        src: common/connInterfacesFile_conf.j2
        dest: "{{ mgmt_config_path }}connInterfacesFile.conf"
      loop: "{{ node_info['management'] }}"
      register: connInterfacesFile_conf
      become: true

    - name: Generate management connNetFilterFile.conf file.
      template:
        src: common/connNetFilterFile_conf.j2
        dest: "{{ mgmt_config_path }}connNetFilterFile.conf"
      loop: "{{ node_info['management'] }}"
      register: connNetFilterFile_conf
      become: true

    - name: Ensure beegfs-mgmtd.conf file is configured.
      template:
        src: management/beegfs_mgmtd_conf.j2
        dest: "{{ mgmt_config_path }}beegfs-mgmtd.conf"
      register: beegfs_mgmtd_conf
      become: true

    - name: Initialize management storage directory for beegfs-mgmtd server daemon and update the beegfs-mgmtd config file.
      command:
        cmd: "/opt/beegfs/sbin/beegfs-setup-mgmtd -p {{ mgmt_data_path }} -c {{ mgmt_config_path }}beegfs-mgmtd.conf -S {{ resource_group }}"
      register: beegfs_setup_mgmtd
      failed_when: "beegfs_setup_mgmtd['rc'] != 0 and 'ERROR: Storage directory is not empty.' not in beegfs_setup_mgmtd['stdout']"
      changed_when: "'ERROR: Storage directory is not empty.' not in beegfs_setup_mgmtd['stdout']"
      become: true

    - name: Unmount management volume.
      command:
        cmd: "umount {{ mgmt_volume_mount }}"
      when: management_volume_mount['changed'] | bool == True
  when: inventory_hostname == preferred_management_node

# Update beegfs-mgmtd.service to point to beegfs-mgmtd.conf.
- name: Override the default beegfs-mgmtd.service file.
  template:
    src: management/beegfs_mgmtd_service.j2
    dest: /etc/systemd/system/beegfs-mgmtd.service
  register: beegfs_mgmtd_service_override
  become: true

- name: Reload systemctl daemons.
  systemd:
    name: beegfs-mgmtd.service
    enabled: false
    daemon_reload: "{% if beegfs_mgmtd_service_override['changed'] %}true{% else %}false{% endif %}"
  register: beegfs_mgmtd_service
  become: true

#- name: Configure pacemaker resources.
#  block:
#    - name: Query current pacemaker management group resources.
#      command:
#        cmd: "cibadmin --query --xpath '/cib/configuration/resources/group[@id=\"{{ resource_group }}-group\"]'"
#      register: mgmt_group_resource_query
#      failed_when: false
#      changed_when: false
#
#    - name: Determine whether changes are required.
#      command:
#        cmd: "crm_diff -O '{{ mgmt_group_resource_query[\"stdout\"] | default(\"\")}}' -N '{{ lookup(\"template\", \"management/resources.j2\") }}'"
#      register: mgmt_group_resource_diff
#      changed_when: false
#      failed_when: mgmt_group_resource_diff['rc'] not in [0, 1]
#
#    - name: Determine whether resource group order changed.
#      set_fact:
#        mgmt_group_resource_order_diff: |-
#          {%- set existing = mgmt_group_resource_query["stdout"] | default("") | regex_replace("/s+", " ") | regex_replace("\n", "") -%}
#          {%- set expected = lookup("template", "management/resources.j2") | regex_replace("/s+", " ") | regex_replace("\n", "") -%}
#          {{- not (existing == expected) | bool -}}
#
#    - name: Modify pacemaker management group resources.
#      command:
#        cmd: "cibadmin {% if mgmt_group_resource_query['rc'] == 6 %}--create --scope resources{% else %}--replace --xpath '/cib/configuration/resources/group[@id=\"{{ resource_group }}-group\"]'{% endif %} --xml-text '{{ lookup(\"template\", \"management/resources.j2\") }}'"
#      register: mgmt_group_resource_update
#      when: mgmt_group_resource_diff['rc'] == 1 or mgmt_group_resource_order_diff == True
#  when: inventory_hostname == preferred_management_node




#- name: Build pacemaker cluster management group resources.
#  set_fact:
#    cluster_resources: '{{ lookup("template", "management/resources.j2") }}'
#  run_once: true

