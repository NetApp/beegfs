#!/bin/bash
# OCF Resource Agent compliant beegfs-monitor script.
#
# License: BSD-3-Clause
# Author: Nathan Swartz

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

###############################################################################
# Helper functions

shm_root=/dev/shm/eseries_beegfs_ha

convert_ipv4_address_to_int() {
  echo "$1" | awk '''
  {
    split($0, parts, "/")
    cidr=parts[2]
    split(parts[1], octets, ".")
    address_int=octets[1]*16777216 + octets[2]*65536 + octets[3]*256 + octets[4]
    printf address_int
  }
  '''
}

convert_int_to_ipv4_address() {
  echo "$1" | awk '''
  {
    address_int=$0
    v1=lshift(rshift(address_int, 24), 24)
    v2=lshift(rshift(address_int - v1, 16), 16)
    v3=lshift(rshift(address_int - v1 - v2, 8), 8)
    v4= address_int - v1 - v2 - v3
    octet1 = v1 / 16777216
    octet2 = v2 / 65536
    octet3 = v3 / 256
    octet4 = v4
    printf octet1"."octet2"."octet3"."octet4" "
  }
  '''
}

get_ipv4_subnet_addresses() {
  cidr_subnet=$1
  base_address=$(echo $cidr_subnet | cut -f 1 -d '/' )
  subnet=$(echo $cidr_subnet | cut -f 2 -d '/' )

  start_address_int=$(convert_ipv4_address_to_int $base_address)
  end_address_int=$(( $start_address_int + 2 ** (32 - $subnet) - 1 ))
  for address_int in $(seq $start_address_int $end_address_int); do
    convert_int_to_ipv4_address $address_int
  done
}

check_resource_service() {
  if systemctl is-active "$service" > /dev/null 2>&1; then
    return 0
  fi

  return 1
}

# Return network communication interface name(s) from the BeeGFS resource's connInterfaceFile
get_mgmt_ip() {
  if [ "$type" != "management" ]; then
    grep "^sysMgmtdHost" "$conf_path" | tr -d "[:space:]" | cut -f 2 -d "="
  fi
}

# Return network communication interface name(s) from the BeeGFS resource's connInterfaceFile
get_interfaces() {
  # Determine BeeGFS service network IP interfaces.
  connInterfacesFile_path=$(grep "^connInterfacesFile" "$conf_path" | tr -d "[:space:]" | cut -f 2 -d "=")

  interfaces=""
  if [ -n "$connInterfacesFile_path" ] && [ -e $connInterfacesFile_path ]; then
    while read -r entry; do
      interface=$(echo "$entry" | cut -d ":" -f 1)
      interfaces="$interfaces $interface"
    done < $connInterfacesFile_path
  fi

  echo "$interfaces"
}

# Return list containing all the BeeGFS resource's usable IP addresses. *Note that these are filtered by the connNetFilterFile entries.
get_subnet_ips() {
  # Determine all possible BeeGFS service network IP addresses.
  connNetFilterFile_path=$(grep "^connNetFilterFile" "$conf_path" | tr -d "[:space:]" | cut -f 2 -d "=")

  filter_ips=""
  if [ -n "$connNetFilterFile_path" ] && [ -e $connNetFilterFile_path ]; then
    while read -r filter; do
      filter_ips="$filter_ips $(get_ipv4_subnet_addresses $filter)"
    done < $connNetFilterFile_path
  fi

  echo "$filter_ips"
}

get_parent_slaves() {
  parent_path=$1
  parent_name=$2
  parent_slaves="$(ls -A /sys/class/block/$parent_name/slaves)"

  # Check whether the slaves directory was populated which means multipath is used. If not then
  #   attempt to discover block devices with wwids matching the parent device (nvme native).
  if [ -z "$parent_slaves" ] && [ -f /sys/class/block/$parent_name/wwid ]; then
    parent_wwid=$(cat /sys/class/block/$parent_name/wwid)
    for device_path in /sys/class/block/*; do
      if ! [ -f $device_path/wwid ]; then
        continue
      fi

      # Find child devices wwids matching the parent device.
      name=$(basename $device_path)
      wwid=$(cat $device_path/wwid)
      if [ "$name" != "$parent_name" ] && [ "$wwid" == "$parent_wwid" ]; then
        parent_slaves="$parent_slaves $name"
      fi
    done
  fi

  echo $parent_slaves
}

# Ping specified IP address from select interface until successful or retries are exhausted.
ping_interface() {
  interface=$1
  address=$2

  if ping -I "$interface" -W 2 -c 1 "$address" > /dev/null 2>&1 ; then
      echo -n "$address "
  fi
}

# Returns whether at least one of the BeeGFS resource group's communication interface(s) are able to communicate on the network.
check_network_connectivity() {

  # Issue all pings to known neighbors in parallel
  pids=
  mgmt_ip=$(cat $shm_group_path/mgmt_ip)
  for interfaces_path in $shm_group_path/interfaces/*; do
    interface=$(basename $interfaces_path)
    addresses="$(ip neigh show dev $interface | grep -E "(REACHABLE|STALE)" | sort -k 4 | cut -f 1 -d ' ' | head -n 10)"
    if [ -z "$addresses" ]; then
      addresses=$(cat $interfaces_path)
    fi

    true > $interfaces_path
    for address in $addresses $mgmt_ip; do
      ping_interface $interface $address >> $interfaces_path &
      pids="$pids $!"
    done
  done

  # Wait until connectivity is verified
  while true; do
    for interfaces_path in $shm_group_path/interfaces/*; do
      if [ -s $interfaces_path ]; then
        return 0
      fi
    done

    # Check for whether ping processes have completed.
    pings_complete=0
    for pid in $pids; do
      if ps -p $pid > /dev/null 2>&1; then
        pings_complete=1
        break
      fi
    done

    # Fail if all ping processes have completed.
    if [ "$pings_complete" -eq "0" ]; then
      break
    fi
  done

  return 1
}

# Check whether block device is actively completing I/O.
is_device_active() {
  shm_device_path=$1

  rc=1
  for stat_path in $shm_device_path/stats/*; do
    current=$(awk '{reads=$1; writes=$5; print reads+writes}' $stat_path/current)

    # Determine whether there are new completed I/O requests.
    previous=$(cat $stat_path/previous)
    echo $current > $stat_path/previous
    if [ "$current" != "$previous" ]; then
      rc=0
    fi
  done

  return $rc
}

is_device_accessible() {
  device_path=$1
  dd if=$device_path iflag=direct bs=4k count=1 > /dev/null 2>&1
  rc=$?

  return $rc
}

# Return network communication interface name(s) from the BeeGFS resource's connInterfaceFile
check_filesystem_mounts() {
  for shm_device_path in $shm_group_path/devices/*; do
    parent_name=$(cat $shm_device_path/name)
    parent_path=$(cat $shm_device_path/path)
    mount=$(cat $shm_device_path/mount)

    # Check for new device links
    parent_slaves="$(get_parent_slaves $parent_path $parent_name)"
    stats_path=$shm_device_path/stats
    for device_name in $parent_slaves; do
      if [ -d $stats_path/$device_name ]; then
        continue
      fi
      device_path="/sys/class/block/$device_name"
      mkdir $stats_path/$device_name
      ln -s $device_path/stat $stats_path/$device_name/current
      awk '{reads=$1; writes=$5; print reads+writes}' $device_path/stat > $stats_path/$device_name/previous
    done

    if ! mountpoint -q $mount; then
      return 1
    elif ! is_device_active $shm_device_path && ! is_device_accessible $parent_path; then
        return 2
    fi
  done

  return 0
}

###############################################################################

# Output the usage information
beegfs_monitor_usage() {
  cat <<END
Usage: $0 (start|stop|monitor|meta-data|validate-all)

Requires: ping, ip
Parameters:
  service_group                 (Required) BeeGFS resource group name
  service_type                  (Required) Beegfs service (Choices: management, metadata, storage)
  service_name                  (Required) BeeGFS service name
  service_configuration_mount   (Required) BeeGFS service configuration mount path
END
}

# Output the meta-data XML
beegfs_monitor_meta_data() {
  cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="beegfs-monitor">
  <version>1.0</version>
  <longdesc lang="en">This resource agent monitors a single BeeGFS service.</longdesc>
  <shortdesc lang="en">BeeGFS service monitor</shortdesc>
  <parameters>
    <parameter name="service_group" unique="1" required="0">
      <longdesc lang="en">The BeeGFS resource group name.</longdesc>
      <shortdesc lang="en">BeeGFS service group name</shortdesc>
      <content type="string"/>
    </parameter>
    <parameter name="service_type" unique="0" required="0">
      <longdesc lang="en">Type of BeeGFS service which can be one of the following: management, metadata, storage.</longdesc>
      <shortdesc lang="en">BeeGFS service type</shortdesc>
      <content type="string"/>
    </parameter>
    <parameter name="service_name" unique="0" required="0">
      <longdesc lang="en">Name of the BeeGFS systemd service to monitor.</longdesc>
      <shortdesc lang="en">BeeGFS service name</shortdesc>
      <content type="string"/>
    </parameter>
    <parameter name="service_configuration_mount" unique="1" required="0">
      <longdesc lang="en">Path to the BeeGFS service configuration file.</longdesc>
      <shortdesc lang="en">BeeGFS service configuration file</shortdesc>
      <content type="string"/>
    </parameter>
  </parameters>
  <actions>
    <action name="start"/>
    <action name="stop"/>
    <action name="monitor"        timeout="15" interval="17" />
    <action name="meta-data"/>
    <action name="validate-all"/>
  </actions>
</resource-agent>
END
}

beegfs_monitor_start() {
  ha_pseudo_resource ${OCF_RESOURCE_INSTANCE} start

  # Wait for BeeGFS service to start.
  while true; do
    if [ -f $conf_path ] && check_resource_service; then

      # Ensure shared memory directory exists
      if ! [ -d $shm_group_path/devices ]; then
        mkdir -p $shm_group_path/devices
      fi

      get_mgmt_ip > $shm_group_path/mgmt_ip
      get_subnet_ips > $shm_group_path/filter_ips

      # Load file system information into memory
      mounts=$(grep "^store.*Directory" "$conf_path" | cut -f 2 -d "=" | sed 's/\/data//g' | sed 's/,/ /g')
      for mount in $mounts; do
        parent_path=$(mount | grep "$mount" | cut -f 1 -d ' ')
        parent_name=$(lsblk -n -o "KNAME" $parent_path) # grab the kernel name of the device

        # Populate the /dev/shm/eseries_beegfs_ha/<group>/devices/nvmeXnX
        parent_device_path=$shm_group_path/devices/$parent_name
        stats_path=$parent_device_path/stats
        mkdir $parent_device_path
        mkdir $stats_path
        echo "$parent_name" > $parent_device_path/name
        echo "$parent_path" > $parent_device_path/path
        echo "$mount" > $parent_device_path/mount

        # Populate the /dev/shm/eseries_beegfs_ha/<group>/devices/nvmeXnX/stats
        parent_slaves="$(get_parent_slaves $parent_path $parent_name)"
        for device_name in $parent_slaves; do
          device_path="/sys/class/block/$device_name"
          mkdir $stats_path/$device_name
          ln -s $device_path/stat $stats_path/$device_name/current
          awk '{reads=$1; writes=$5; print reads+writes}' $device_path/stat > $stats_path/$device_name/previous
        done
      done

      # Load initial neighbors into memory
      interfaces_path=$shm_group_path/interfaces
      mkdir $interfaces_path
      for interface in $(get_interfaces); do
        neighbors=$(ip neigh show dev $interface | grep REACHABLE | cut -d ' ' -f 1)

        #TODO: Filter neighbors
        echo $neighbors > $interfaces_path/$interface
      done

      return $OCF_SUCCESS
    fi
    sleep 0.1
  done
}

beegfs_monitor_stop() {
  ha_pseudo_resource ${OCF_RESOURCE_INSTANCE} stop
  rm -rf $shm_group_path
}

# Validate BeeGFS service is running.
beegfs_monitor_monitor() {

  # Check resource tracking file.
  ha_pseudo_resource ${OCF_RESOURCE_INSTANCE} monitor
  ha_pseudo_resource_status=$?
  if [ $ha_pseudo_resource_status -ne $OCF_SUCCESS ]; then
    return $ha_pseudo_resource_status
  fi

  # Evaluate whether monitored resource has started systemd service (management, metadata or storage).
  declare -i retries=20
  declare -i filesystem_check=1
  declare -i network_check=1
  declare -i service_check=1
  while [ $retries -gt 0 ]; do
    retries=$retries-1

    if [ $filesystem_check -eq 1 ] && check_filesystem_mounts; then
      filesystem_check=0
    fi
    if [ $network_check -eq 1 ] && check_network_connectivity; then
      network_check=0
    fi
    if [ $service_check -eq 1 ] && check_resource_service; then
      service_check=0
    fi

    if [ $filesystem_check -eq 0 ] && [ $network_check -eq 0 ] && [ $service_check -eq 0 ]; then
      return $OCF_SUCCESS
    fi

    sleep 0.1
  done

  # Determine what failure occurred.
  if [ $filesystem_check -eq 1 ]; then
    ocf_exit_reason "Filesystem mount(s) are not active!"
  elif [ $network_check -eq 1 ]; then
    ocf_exit_reason "Network is not reachable!"
  elif [ $service_check -eq 1 ]; then
    ocf_exit_reason "Service is not active!"
  fi

  return $OCF_ERR_GENERIC
}

# Validate beegfs-monitor requirements
beegfs_monitor_validate_all() {
  return $OCF_SUCCESS
}

###############################################################################

# Provide information for metadata and usage requests
case $__OCF_ACTION in
  meta-data)
    beegfs_monitor_meta_data
    exit $OCF_SUCCESS
    ;;
  usage|help)
    beegfs_monitor_usage
    exit $OCF_SUCCESS
    ;;
esac

# Set argument variables
group=${OCF_RESKEY_service_group:-""}
type=${OCF_RESKEY_service_type:-""}
service=${OCF_RESKEY_service_name:-""}
configuration_mount=${OCF_RESKEY_service_configuration_mount:-""}
configuration_mount=${configuration_mount%%/}
shm_group_path=$shm_root/$group

case $type in
  management)
    conf_path="${configuration_mount}/mgmt_config/beegfs-mgmtd.conf"
    ;;
  metadata)
    conf_path="${configuration_mount}/metadata_config/beegfs-meta.conf"
    ;;
  storage)
    conf_path="${configuration_mount}/storage_config/beegfs-storage.conf"
    ;;
  *)
    beegfs_monitor_usage
    exit $OCF_ERR_ARGS
    ;;
esac

# Perform action requests
case $__OCF_ACTION in
  start)
    beegfs_monitor_start
    exit $?
    ;;
  stop)
    beegfs_monitor_stop
    exit $?
    ;;
  monitor)
    beegfs_monitor_monitor
    exit $?
    ;;
  validate-all)
    beegfs_monitor_validate_all
    exit $?
    ;;
  *)
    beegfs_monitor_usage
    exit $OCF_ERR_UNIMPLEMENTED
    ;;
esac
