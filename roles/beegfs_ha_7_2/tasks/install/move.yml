- name: Determine preferred service-nodes.
  set_fact:
    preferred_resource_node_list: |-
      {%- set resource_node_list = {} -%}
      {%- for host in groups[beegfs_ha_ansible_cluster_group] if "node_info" in (hostvars[host].keys() | list) -%}
        {%- set node_info = hostvars[host]["node_info"] -%}
        {%- for service in node_info["services"] -%}
          {%- for resource_group_info in node_info[service] if host == resource_group_info["preferred_node_order"][0] -%}
            {%- if resource_node_list.update({resource_group_info["resource_group"]: host}) -%}{%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- resource_node_list -}}

- name: Clear any previous failures. This is required to allow systems to migrate back after a failure.
  command:
    cmd: "crm_resource --cleanup"
  become: true
  register: clean_up_all_resources
  until: '"rc" in (clean_up_all_resources.keys() | list) and clean_up_all_resources["rc"] == 0'
  retries: 10
  delay: 6

- name: Clear any previous failures. This is required to allow systems to migrate back after a failure.
  command:
    cmd: "crm_resource --resource {{ item['key'] }}-monitor --clear"
  register: clear_resources
  become: true
  changed_when: clear_resources['rc'] == 0
  failed_when: false
  loop: "{{ preferred_resource_node_list | dict2items }}"
  until: '"rc" in (clear_resources.keys() | list) and clear_resources["rc"] == 0'
  retries: 10
  delay: 6

- name: Wait for cluster resource to be in a stable state before continuing.
  command:
    cmd: "crm_resource --wait"
  become: true
  register: clean_up_all_resources
  until: '"rc" in (clean_up_all_resources.keys() | list) and clean_up_all_resources["rc"] == 0'
  retries: 10
  delay: 6

- name: Attempt to return services to their preferred BeeGFS HA cluster nodes.
  command:
    cmd: "crm_resource --resource {{ item['key'] }}-monitor --move --node {{ item['value'] }}"
  register: restore_resources
  become: true
  changed_when: restore_resources['rc'] == 0
  failed_when: false
  loop: "{{ preferred_resource_node_list | dict2items }}"
  until: '"rc" in (restore_resources.keys() | list) and restore_resources["rc"] in [0, 108]'
  retries: 10
  delay: 6

- name: Wait for all moves to complete and then remove temporary contraints
  block:
    - name: Wait for cluster resource to be in a stable state before continuing.
      command:
        cmd: "crm_resource --wait"
      changed_when: false
      failed_when: false
      become: true

    - name: Remove temporary constraints to force services to their preferred nodes.
      command:
        cmd: "crm_resource --resource {{ item }}-monitor --un-move"
      register: resource_unmove
      changed_when: false
      failed_when: false
      loop: "{{ migrated_resources }}"
      vars:
        migrated_resources: |-
          {%- set resources = [] -%}
          {%- for resource in restore_resources["results"] if "changed" in (resource.keys() | list) and resource["changed"] == true -%}
            {%- if resources.append(resource["item"]["key"]) -%}{%- endif -%}
          {%- endfor -%}
          {{- resources -}}
  when: restore_resources["changed"] == true
  become: true
