- name: Create mount point directory for each storage volume from each storage service.
  file:
    state: directory
    path: "{{ item['metadata']['mount_dir'] }}{{ item['name'] }}"
  loop: "{{ all_volumes }}"
  become: true
  vars:
    all_volumes: |-
      {%- set all_volumes = [] -%}
      {%- for storage in node_info["storage"] -%}
        {%- for volume in storage["volumes"] -%}
          {%- if all_volumes.append(volume) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- all_volumes -}}

- name: Retrieve currently mounted volumes on the preferred host.
  command:
    cmd: mount
    warn: false
  changed_when: false
  register: mount_info
  become: true

- name: Ensure the storage volumes are mounted on the preferred hosts.
  command:
    cmd: "mount -t {{ item['metadata']['format_type'] }} -o {{ item['metadata']['mount_options'] }}
                {{ item['path'] }} {{ item['metadata']['mount_dir'] }}{{ item['name'] }}"
    warn: false
  loop: "{{ preferred_volumes }}"
  register: storage_volume_mount
  changed_when: "storage_volume_mount['rc'] == 0"
  failed_when: "storage_volume_mount['rc'] != 0 and not (storage_volume_mount['rc'] == 32 and 'already mounted' in storage_volume_mount['stderr'])"
  when: item['name'] not in mounted_storage_volumes
  become: true
  vars:
    preferred_volumes: |-  # Creates a list of preferred volumes for each host
      {%- set preferred_volumes = [] -%}
      {%- for storage in node_info["storage"] if storage["preferred_node_order"][0] == inventory_hostname -%}
        {%- for volume in storage["volumes"] -%}
          {%- if preferred_volumes.append(volume) -%}{%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- preferred_volumes -}}
    mounted_storage_volumes: |-
      {%- set volumes = [] -%}
      {%- for storage in node_info["storage"] -%}
        {%- for volume in storage["volumes"] -%}
          {%- for line in mount_info["stdout_lines"] if volume["name"] in line -%}
            {%- if volumes.append(volume) -%}{%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- volumes -}}

- name: Create data directory for storage service.
  file:
    state: directory
    path: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/data"
  loop: "{{ node_info['storage'] }}"
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Create storage_config directory for metadata service.
  file:
    state: directory
    path: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/storage_config"
  loop: "{{ node_info['storage'] }}"
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Generate storage connInterfacesFile.conf file.
  template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'common/connInterfacesFile_conf.j2') }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/storage_config/connInterfacesFile.conf"
  loop: "{{ node_info['storage'] }}"
  register: connInterfacesFile_conf
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Generate storage connNetFilterFile.conf file.
  template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'common/connNetFilterFile_conf.j2') }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/storage_config/connNetFilterFile.conf"
  loop: "{{ node_info['storage'] }}"
  register: connNetFilterFile_conf
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Ensure beegfs-storage.conf file is configured.
  template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'storage/beegfs_storage_conf.j2') }}"
    dest: "{{ item['volumes'][0]['metadata']['mount_dir'] }}{{ item['volumes'][0]['name'] }}/storage_config/beegfs-storage.conf"
  loop: "{{ node_info['storage'] }}"
  when: inventory_hostname == item['preferred_node_order'][0]
  become: true

- name: Initialize storage directory for beegfs-storage server daemon and update beegfs-storage config file.
  command:
    cmd: "{{ item }}"
  loop: "{{ commands }}"
  register: beegfs_setup_storage
  failed_when: "beegfs_setup_storage['rc'] != 0 and 'ERROR: Storage target directory is not empty.' not in beegfs_setup_storage['stdout']"
  changed_when: "'ERROR: Storage target directory is not empty.' not in beegfs_setup_storage['stdout']"
  become: true
  vars:
    commands: |-
      {%- set commands = [] -%}
      {%- for storage in node_info["storage"] if storage["preferred_node_order"][0] == inventory_hostname -%}
        {%- set conf_path = storage["volumes"][0]["metadata"]["mount_dir"] ~ storage["volumes"][0]["name"] ~ "/storage_config/beegfs-storage.conf" -%}
        {%- set node_string_id = storage['node_string_id'] -%}
        {%- set node_id = node_string_id.split('_')[-1] | int | string -%}

        {%- for volume in storage["volumes"] -%}
          {%- set target_name = volume['name'] -%}
          {%- set target_id = target_name.split('_')[-1] | int -%}
          {%- set data_path = volume['metadata']['mount_dir'] ~ volume['name'] ~ "/data" -%}
          {%- set base_cmd = "/opt/beegfs/sbin/beegfs-setup-storage -C -p " ~ data_path ~ " -s " ~ node_id ~ " -S " ~ target_name ~ " -i " ~ target_id -%}
          {%- if loop['first'] -%}
            {%- if commands.append(base_cmd ~ " -m " ~ management_info['resource_group']) -%}{%- endif -%}
          {%- else -%}
            {%- if commands.append(base_cmd) -%}{%- endif -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endfor -%}
      {{- commands -}}

- name: Unmount storage volume.
  command:
    cmd: "umount {{ item['item']['metadata']['mount_dir'] }}{{ item['item']['name'] }}"
  loop: "{{ storage_volume_mount['results'] }}"
  ignore_errors: true
  when: item['changed'] == True
  become: true

# Update beegfs-storage.service to point to beegfs-storage.conf.
- name: Override the default beegfs-beegfs-storage.service file.
  template:
    src: "{{ lookup('netapp_eseries.beegfs.eseries_template_path', 'storage/beegfs_storage_service.j2') }}"
    dest: /etc/systemd/system/beegfs-storage@.service
  register: beegfs_storage_service_override
  become: true

- name: Reload systemctl daemons.
  systemd:
    name: "beegfs-storage@{{ item['volumes'][0]['name'] }}"
    #state: stopped
    enabled: false
    daemon_reload: "{% if beegfs_storage_service_override['changed'] %}true{% else %}false{% endif %}"
  register: beegfs_storage_service
  loop: "{{ node_info['storage'] }}"
  become: true
