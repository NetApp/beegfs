- name: Add required BeeGFS sysctl.conf entries.
  ansible.posix.sysctl:
    name: "{{ item['key'] }}"
    value: "{{ item['value'] }}"
    state: present
    reload: true
    sysctl_file: "{{ sysctl_conf_path }}"
  loop: "{{ lookup('dict', beegfs_ha_required_sysctl_entries) }}"
  become: true

- name: Determine all BeeGFS services.
  ansible.builtin.service_facts:
  changed_when: false
  become: true

- name: Ensure SELinux is configured to be disabled.
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: SELINUX=disabled
  become: true

- name: Check whether SELinux is be enforced.
  ansible.builtin.command: getenforce
  register: getenforce
  changed_when: false
  become: true

- name: Restart cluster nodes to apply SELinux configuration changes.
  block:
    - name: Wait for user to continue before rebooting since BeeGFS HA cluster is running.
      ansible.builtin.pause:
        prompt: "WARNING! Identified the cluster is running and SELinux has been disabled and requires a reboot. If you are still in the process of deploying the cluster this can be safely ignored. If you are attempting to make changes to an existing cluster, continuing will disrupt filesystem operations. What would you like to do (continue, skip)? Ctrl+C to stop"
      delay: 0
      register: cluster_running_warning
      until: cluster_running_warning['user_input'] | regex_search("(continue|skip){1}", ignorecase=True)
      when: 'ansible_facts["services"]["pacemaker.service"]["state"] == "running"'
      run_once: true

    - name: Reboot host to apply SELinux configuration changes.
      ansible.builtin.include_role:
        name: netapp_eseries.host.common
        tasks_from: reboot.yml
        apply:
          vars:
            eseries_common_allow_host_reboot_reason: "SELinux configuration changed. Reboot is required."
      when: cluster_running_warning["user_input"] | regex_search("continue", ignorecase=True)

    - name: Ensure BeeGFS HA cluster nodes are in maintenance mode.
      ansible.builtin.include_tasks: ../common/maintenance/set.yml
      when: inventory_hostname == cluster_automation_node
  when: getenforce["stdout"] != "disabled"
  become: true
 