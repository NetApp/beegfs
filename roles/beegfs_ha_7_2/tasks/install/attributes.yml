# Ensure cluster crm_config defaults are configured.
- name: Get pacemaker-schedulerd metadata.
  ansible.builtin.command: /usr/libexec/pacemaker/pacemaker-schedulerd metadata
  changed_when: false
  register: pacemaker_schedulerd_metadata

- name: Get pacemaker-controld metadata.
  ansible.builtin.command: /usr/libexec/pacemaker/pacemaker-controld metadata
  changed_when: false
  register: pacemaker_controld_metadata

- name: Get pacemaker-based metadata.
  ansible.builtin.command: /usr/libexec/pacemaker/pacemaker-based metadata
  changed_when: false
  register: pacemaker_based_metadata

- name: Determine all global configuration attributes.
  ansible.builtin.command: "cibadmin --query --scope crm_config"
  changed_when: false
  register: crm_config
  become: true

- name: Delete any unexpected global configuration attributes.
  ansible.builtin.command: "crm_attribute --type crm_config --name {{ item }} --delete --quiet"
  loop: "{{ attributes }}"
  become: true
  vars:
    attributes: |-
      {%- set defaults_parameters = beegfs_ha_cluster_crm_config_defaults -%}
      {%- set parameters_schedulerd_raw_xml = pacemaker_schedulerd_metadata["stdout"] | regex_search('<parameters(.|\n)*parameters>') -%}
      {%- set parameters_controld_raw_xml = pacemaker_controld_metadata["stdout"] | regex_search('<parameters(.|\n)*parameters>') -%}
      {%- set parameters_based_raw_xml = pacemaker_based_metadata["stdout"] | regex_search('<parameters(.|\n)*parameters>') -%}
      {%- set parameters_raw_xml = parameters_schedulerd_raw_xml ~ parameters_controld_raw_xml ~ parameters_based_raw_xml -%}
      {%- for parameter_raw_xml in parameters_raw_xml.split("</parameter>") -%}
        {%- set parameter_info = parameter_raw_xml | regex_search('<parameter.*name=\\\"(?P<parameter>.*?)\\\"(.|\n)*<content.*default=\\"(?P<default>.*?)\\"', '\\g<parameter>', '\\g<default>') -%}
        {%- if parameter_info is iterable and parameter_info | length == 2 and parameter_info[0] not in (defaults_parameters.keys() | list) + beegfs_ha_cluster_crm_config_ignore -%}
          {%- if defaults_parameters.update({parameter_info[0]: parameter_info[1]}) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}

      {%- set attributes = [] -%}
      {%- set expected_keys = (beegfs_ha_cluster_crm_config_defaults.keys() | list) + (beegfs_ha_cluster_crm_config_options.keys() | list) + beegfs_ha_cluster_crm_config_ignore -%}
      {%- for line in crm_config["stdout_lines"] -%}
        {%- set results = line | regex_search(' *<nvpair.*name="(?P<name>.*?)"', '\\g<name>') -%}
        {%- if results is iterable and results[0] in defaults_parameters and results[0] not in expected_keys -%}
          {%- if attributes.append(results[0]) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{- attributes -}}

- name: Get the current global configuration attributes.
  ansible.builtin.command: "crm_attribute --type crm_config --name {{ item['key'] }} --query --quiet"
  loop: "{{ lookup('ansible.builtin.dict', beegfs_ha_cluster_crm_config_defaults | combine(beegfs_ha_cluster_crm_config_options)) }}"
  changed_when: false
  failed_when: false
  register: crm_config_defaults_query
  become: true

- name: Set global configuration attributes
  ansible.builtin.command: "crm_attribute --type crm_config --name {{ item['item']['key'] }} --update {{ item['item']['value'] }}"
  loop: "{{ crm_config_defaults_query['results'] }}"
  when: item['rc'] != 0 or item['stdout'] != item["item"]["value"] | string
  become: true

# Ensure cluster resource defaults are configured.
- name: Determine cluster resource defaults.
  ansible.builtin.command: "crm_attribute --type rsc_defaults --name {{ item['key'] }} --query --quiet"
  loop: "{{ lookup('ansible.builtin.dict', beegfs_ha_cluster_resource_defaults, wantlist=true) }}"
  changed_when: false
  failed_when: false
  register: resource_default_query
  become: true

- name: Set cluster resource defaults.
  ansible.builtin.command: "crm_attribute --type rsc_defaults --name {{ item['item']['key'] }} --update {{ item['item']['value'] }}"
  loop: "{{ resource_default_query['results'] }}"
  when: item['rc'] != 0 or item['stdout'] != item["item"]["value"] | string
  become: true
