- name: Determine whether cluster has started.
  ansible.builtin.command: crm_mon --simple-status
  register: crm_mon_status
  failed_when: false
  changed_when: false
  become: true

- name: Ensure cluster nodes are in maintenance mode.
  block:
    - name: Determine whether corosync and pacemaker services exist.
      ansible.builtin.service_facts:
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups[beegfs_ha_ansible_cluster_group] }}"

    - name: Ensure corosync is started.
      ansible.builtin.systemd:
        state: started
        name: corosync
      when: beegfs_ha_pacemaker_cluster_node and hostvars[item]['services']['corosync.service'] is defined
      delegate_to: "{{ item }}"
      loop: "{{ groups[beegfs_ha_ansible_cluster_group] }}"

    - name: Ensure pacemaker is started.
      ansible.builtin.systemd:
        state: started
        name: pacemaker
      when: beegfs_ha_pacemaker_cluster_node and hostvars[item]['services']['pacemaker.service'] is defined
      delegate_to: "{{ item }}"
      loop: "{{ groups[beegfs_ha_ansible_cluster_group] }}"

    - name: Ensure cluster nodes are in maintenance mode.
      block:
        - name: Check whether node is in maintenance-mode or the cluster is stopped on the node.
          ansible.builtin.command: "crm_attribute --name maintenance-mode --query"
          register: maintenance_mode_query
          failed_when: false
          changed_when: false

        - name: Move cluster nodes into maintenance mode.
          block:
            - name: Move cluster nodes into maintenance mode.
              ansible.builtin.include_tasks: set_node.yml
              loop: "{{ groups[beegfs_ha_ansible_cluster_group] }}"
              loop_control:
                loop_var: cluster_node

            - name: Wait for cluster changes to stabilize if the cluster is started.
              ansible.builtin.command: "crm_resource --wait"
              changed_when: false
              ignore_errors: true
              timeout: 30
          when: maintenance_mode_query["stdout"] | regex_search(".*value=(?!true|on|y|1)", ignorecase=true)
      when: crm_mon_status["rc"] == 0
      run_once: true

    - name: If cluster has started then move cluster nodes into maintenance mode.
      block:
        - name: Move cluster into maintenance mode.
          ansible.builtin.command: "crm_attribute --name maintenance-mode --update true"
          register: global_maintenance_mode

        - name: Check whether cluster was placed in maintenance mode.
          ansible.builtin.pause:
            prompt: "WARNING! Identified the cluster is at least partially deployed, but was unable to put the cluster into maintenance mode. If you are still in the process of deploying the cluster this can be safely ignored. If you are attempting to make changes to an existing cluster, continuing may temporarily disrupt filesystem operations, but will likely correct any outstanding issues with the cluster. Press enter to continue, Ctrl+C to interrupt"
          when: global_maintenance_mode["rc"] != 0

        - name: Wait for cluster changes to stabilize if the cluster is started.
          ansible.builtin.command: "crm_resource --wait"
          changed_when: false
          ignore_errors: true
          timeout: 30
      when: crm_mon_status["rc"] != 0
      run_once: true
  when: 'crm_mon_status["rc"] != 2 or crm_mon_status["stderr"] | regex_search("crm_mon.*", ignorecase=true)'
  become: true
  ignore_errors: true
