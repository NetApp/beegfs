- name: Retrieve initiator volume list from E-Series storage systems (All).
  netapp_eseries.santricity.na_santricity_facts:
    ssid: "{{ creds['ssid'] }}"
    api_url: "{{ creds['api_url'] }}"
    api_username: "{{ creds['api_username'] }}"
    api_password: "{{ creds['api_password'] }}"
    validate_certs: "{{ creds['validate_certs'] }}"
  loop: "{{ lookup('list', groups[beegfs_eseries_group] | default(beegfs_eseries_group)) }}"
  register: storage_array_facts
  vars:
    creds: |-
      {%- set info = hostvars[item] -%}
      {%- set info_keys = info.keys() | list -%}
      {%- set creds = {} -%}
      {%- if "eseries_validate_certs" in info_keys -%}
        {%- if creds.update({"validate_certs": info['eseries_validate_certs']}) -%}{%- endif -%}
      {%- endif -%}
      {%- if "eseries_system_api_url" in info_keys and "eseries_system_password" in info_keys -%}
        {%- if creds.update({"ssid": "1",
                             "api_url": info["eseries_system_api_url"],
                             "api_username": info["eseries_system_username"] | default("admin"),
                             "api_password": info["eseries_system_password"]}) -%}{%- endif -%}
      {%- elif "eseries_proxy_ssid" in info_keys and "eseries_proxy_api_url" in info_keys and "eseries_proxy_api_password" in info_keys -%}
        {%- if creds.update({"ssid": info["eseries_proxy_ssid"],
                             "api_url": info["eseries_proxy_api_url"],
                             "api_username": info["eseries_proxy_api_username"] | default("admin"),
                             "api_password": info["eseries_proxy_api_password"]}) -%}{%- endif -%}
      {%- elif "eseries_api_url" in info_keys and "eseries_api_password" in info_keys -%}
        {%- if creds.update({"ssid": info["eseries_ssid"] | default("1"),
                             "api_url": info["eseries_api_url"],
                             "api_username": info["eseries_api_username"] | default("admin"),
                             "api_password": info["eseries_api_password"]}) -%}{%- endif -%}
      {%- endif -%}
      {{- creds -}}

- name: Populate eseries_volumes variable for each host (All).
  set_fact:
    eseries_volumes: |-
      {%- set volumes = [] -%}
      {%- for result in storage_array_facts["results"] -%}
        {%- if "storage_array_facts" in (result.keys() | list) and
               "netapp_volumes_by_initiators" in (result["storage_array_facts"].keys() | list) -%}
          {%- if inventory_hostname in (result["storage_array_facts"]["netapp_volumes_by_initiators"].keys() | list) -%}
            {%- if volumes.extend(result["storage_array_facts"]["netapp_volumes_by_initiators"][inventory_hostname]) -%}{%- endif -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{- volumes -}}

- name: Determine volumes tagged as BeeGFS storage volumes (All).
  set_fact:
    storage_volumes: |-
      {%- set volumes = [] -%}
      {%- for volume in eseries_volumes -%}
        {%- if volume["workload_name"] == "beegfs_storage" -%}
          {%- if volumes.append(volume) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{- volumes -}}

- name: Determine volumes tagged as BeeGFS metadata volumes (All).
  set_fact:
    metadata_volumes: |-
      {%- set volumes = [] -%}
      {%- for volume in eseries_volumes -%}
        {%- if volume["workload_name"] == "beegfs_metadata" -%}
          {%- if volumes.append(volume) -%}{%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{- volumes -}}

- name: Discover volume paths (Storage/Metadata).
  block:
    - name: Find all mapped storage/metadata volumes.
      import_tasks: common/find_volume_paths.yml

    - name: Force a rescue when volumes are not available (Storage/Metadata).
      block:
        - name: Rescan iSCSI sessions (Storage/Metadata).
          command:
            cmd: "iscsiadm -m session -R"
          become: true
          when: "'rescan_iscsi_sessions' in rescan_actions"

        - name: Rescan for all SCSI devices (Storage/Metadata).
          shell: "{{ item }}"
          become: true
          failed_when: false
          loop:
            - "for x in $(ls /sys/class/scsi_host); do echo '- - -' > /sys/class/scsi_host/$x/scan; done &> /dev/null"
            - "for x in $(ls /sys/block); do echo 1 > /sys/block/$x/device/rescan; done &> /dev/null"
          when: "'rescan_scsi_bus' in rescan_actions"

        - name: Reload multipath service (Storage/Metadata).
          systemd:
            name: multipathd.service
            state: restarted
            daemon_reload: true
          become: true
          when: "'rescan_scsi_bus' in rescan_actions"

        - name: Find all mapped storage/metadata volume paths.
          import_tasks: common/find_volume_paths.yml
        - name: Reboot BeeGFS nodes with missing volumes (Storage/Metadata).
          reboot:
            test_command: "systemctl is-active --quiet remote-fs.target"
          become: true
          when: "'rescan' in rescan_actions"

        - name: Find all mapped storage/metadata volume paths.
          import_tasks: common/find_volume_paths.yml
        - name: Fail when volumes are not available (Storage/Metadata).
          fail:
            msg: "Failed to discover storage or metadata volumes!"
          when: "'rescan' in rescan_actions"
      when: "'rescan' in rescan_actions"

    - name: Find all mapped storage/metadata volume paths.
      import_tasks: common/find_volume_paths.yml
    - name: Add storage/metadata volume paths to storage/metadata volume variables.
      import_tasks: common/add_volume_paths.yml
