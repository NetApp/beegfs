- name: Verify all expected volumes are present (Storage/Metadata).
  stat:
    path: "/dev/mapper/3{{ item['wwn'] | lower }}"
  loop: "{{ lookup('list', storage_volumes + metadata_volumes) }}"
  register: volume_stats

- name: Determine if SCSI bus rescan is required (Storage/Metadata).
  set_fact:
    beegfs_node_scsi_rescan_required: |-
      {%- set missing=[] %}
      {%- for item in volume_stats["results"] %}
        {%- if item["stat"]["exists"] == False %}
          {%- if missing.append(item) %}{%- endif %}
        {%- endif %}
      {%- endfor %}
      {{ missing | length > 0 }}

- name: If expected volumes are missing, rescan SCSI bus and reload multipath (Storage/Metadata).
  block:
    - name: Rescan SCSI bus and devices (Storage/Metadata).
      shell: "{{ item }}"
      loop:
        - "for x in $(ls /sys/class/scsi_host); do echo '- - -' > /sys/class/scsi_host/$x/scan; done &> /dev/null"
        - "for x in $(ls /sys/block); do echo 1 > /sys/block/$x/device/rescan; done &> /dev/null"
    - name: Reload multipath service (Storage/Metadata).
      systemd:
        name: multipathd.service
        state: restarted
        daemon_reload: true
    - name: Recheck all expected volumes are present (Storage/Metadata).
      stat:
        path: "/dev/mapper/3{{ item['wwn'] | lower }}"
      loop: "{{ lookup('list', storage_volumes + metadata_volumes) }}"
      register: volume_stats
    - name: Determine if BeeGFS nodes need to be rebooted (Storage/Metadata).
      set_fact:
        beegfs_node_reboot_required: |-
          {%- set missing=[] %}
          {%- for item in volume_stats["results"] %}
            {%- if item["stat"]["exists"] == False %}
              {%- if missing.append(item) %}{%- endif %}
            {%- endif %}
          {%- endfor %}
          {{ missing | length > 0 }}
    - name: Reboot BeeGFS nodes with missing volumes (Storage/Metadata).
      reboot:
        test_command: "systemctl is-active --quiet remote-fs.target"
      when: beegfs_node_reboot_required
  when: beegfs_node_scsi_rescan_required

- name: Format BeeGFS Storage volumes using xfs.
  filesystem:
    fstype: xfs
    dev: "/dev/mapper/3{{ item['wwn'] | lower }}"
    opts: "-d su={{ item['segment_size_kb'] }}k,sw={{ item['stripe_count'] }} -l version=2,su={{ item['segment_size_kb'] }}k"
  loop: "{{ lookup('list', storage_volumes) }}"
  when: "'storage' in beegfs_node_roles"

- name: Format BeeGFS Metadata volumes using ext4.
  filesystem:
    fstype: ext4
    dev: "/dev/mapper/3{{ item['wwn'] | lower }}"
    opts: "{{ beegfs_metadata_format_options }}"
  loop: "{{ lookup('list', metadata_volumes) }}"
  when: "'metadata' in beegfs_node_roles"

- name: Mount BeeGFS Storage volumes (quotas disabled).
  mount:
    path: "{{ beegfs_data_directory }}beegfs/{{ item['name'] }}"
    src: "/dev/mapper/3{{ item['wwn'] | lower }}"
    fstype: xfs
    state: mounted
    opts: "{{ beegfs_storage_mounting_options }}"
  loop: "{{ lookup('list', storage_volumes) }}"
  when: "'storage' in beegfs_node_roles and beegfs_enable_quota != True"

- name: Mount BeeGFS Storage volumes (quotas enabled).
  mount:
    path: "{{ beegfs_data_directory }}beegfs/{{ item['name'] }}"
    src: "/dev/mapper/3{{ item['wwn'] | lower }}"
    fstype: xfs
    state: mounted
    opts: "{{ beegfs_storage_mounting_options_quotas }}"
  loop: "{{ lookup('list', storage_volumes) }}"
  when: "'storage' in beegfs_node_roles and beegfs_enable_quota == True"

- name: Mount BeeGFS Metadata volumes.
  mount:
    path: "{{ beegfs_data_directory }}beegfs/{{ item['name'] }}"
    src: "/dev/mapper/3{{ item['wwn'] | lower }}"
    fstype: ext4
    state: mounted
    opts: "{{ beegfs_metadata_mounting_options }}"
  loop: "{{ lookup('list', metadata_volumes) }}"
  when: "'metadata' in beegfs_node_roles"
